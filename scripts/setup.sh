#!/bin/bash

echo "Setting up KM project with embedded Quicklisp..."
echo

# Define variables
PROJECT_ROOT="/mnt/e/VSCode/ez-knowledge-machine"
SRC_ROOT="$PROJECT_ROOT/src"
QUICKLISP_DIR="/mnt/e/Quicklisp"
QUICKLISP_SETUP="$QUICKLISP_DIR/setup.lisp"
SBCL_PATH="/mnt/c/Program Files/Steel Bank Common Lisp/sbcl"
LOCAL_PROJECTS="$QUICKLISP_DIR/local-projects"
PACKAGES_ROOT="$PROJECT_ROOT/packages"

# Step 1: Check and create necessary directories
echo "[1/5] Checking and creating directories..."
for dir in "$SRC_ROOT" "$QUICKLISP_DIR" "$LOCAL_PROJECTS" "$PACKAGES_ROOT"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        if [ $? -ne 0 ]; then
            echo "Failed to create $dir"
            read -p "Press Enter to continue..."
            exit 1
        fi
        echo "Created directory $dir"
    else
        echo "Directory $dir already exists, skipping creation."
    fi
done

# Step 2: Install Quicklisp if setup.lisp doesn't exist
echo
echo "[2/5] Setting up Quicklisp..."
echo "QUICKLISP_SETUP=$QUICKLISP_SETUP"
if [ -f "$QUICKLISP_SETUP" ]; then
    echo "setup.lisp exists, skipping Quicklisp installation."
else
    echo "setup.lisp not found, installing Quicklisp..."
    cd "$QUICKLISP_DIR" || {
        echo "Failed to change directory to $QUICKLISP_DIR"
        read -p "Press Enter to continue..."
        exit 1
    }
    curl -O https://beta.quicklisp.org/quicklisp.lisp
    if [ $? -ne 0 ]; then
        echo "Failed to download quicklisp.lisp"
        read -p "Press Enter to continue..."
        exit 1
    fi
    "$SBCL_PATH" --load quicklisp.lisp --eval "(quicklisp-quickstart:install :path \"/mnt/e/Quicklisp/\")" --quit
    if [ $? -ne 0 ]; then
        echo "Quicklisp installation failed"
        read -p "Press Enter to continue..."
        exit 1
    fi
    if [ -f "$PROJECT_ROOT/scripts/install-quicklisp.lisp" ]; then
        "$SBCL_PATH" --noinform --script "$PROJECT_ROOT/scripts/install-quicklisp.lisp"
        if [ $? -ne 0 ]; then
            echo "Running install-quicklisp.lisp failed"
            read -p "Press Enter to continue..."
            exit 1
        fi
    fi
    rm -f quicklisp.lisp
    rm -f "$PROJECT_ROOT/scripts/install-quicklisp.lisp"
fi

# Step 3: Generate .asd files based on Lisp files in SRC_ROOT and include package.lisp
echo
echo "[3/5] Generating .asd files..."
echo "Starting Step 3..."
for p in km km-threads km-rest km-logging; do
    echo "Processing $p..."
    LISP_FILE="$SRC_ROOT/$p.lisp"
    if [ -f "$LISP_FILE" ]; then
        echo "Generating $p.asd in $SRC_ROOT..."
        rm -f "$SRC_ROOT/$p.asd"
        if [ "$p" = "km-rest" ]; then
            content='(defsystem "km-rest" :description "Automatically generated system for km-rest" :author "Generated by build script" :version "0.1.0" :depends-on ("km" "hunchentoot" "quux-hunchentoot" "jsown" "km-logging") :serial t :components ((:file "package") (:file "km-rest")))'
        elif [ "$p" = "km-threads" ]; then
            content='(defsystem "km-threads" :description "Automatically generated system for km-threads" :author "Generated by build script" :version "0.1.0" :depends-on ("cl-threadpool" "jsown" "bordeaux-threads") :serial t :components ((:file "package") (:file "km-threads")))'
        elif [ "$p" = "km" ]; then
            content='(defsystem "km" :description "Automatically generated system for km" :author "Generated by build script" :version "0.1.0" :serial t :components ((:file "package") (:file "km")))'
        elif [ "$p" = "km-logging" ]; then
            content='(defsystem "km-logging" :description "Automatically generated system for km-logging" :author "Generated by build script" :version "0.1.0" :depends-on ("log4cl") :serial t :components ((:file "package") (:file "km-logging")))'
        fi

        echo "$content" > "$SRC_ROOT/$p.asd"
        if [ $? -ne 0 ]; then
            echo "Failed to generate $p.asd due to redirection error"
            read -p "Press Enter to continue..."
            exit 1
        fi
        if [ ! -f "$SRC_ROOT/$p.asd" ]; then
            echo "File $p.asd was not created"
            read -p "Press Enter to continue..."
            exit 1
        fi
        echo "Generated $p.asd successfully"
    else
        echo "No .lisp file found for $p at $LISP_FILE, skipping .asd generation."
    fi
done
echo "Finished Step 3."

# Step 4: Copy Lisp files, .asd files, and package.lisp to respective local-projects folders
echo
echo "[4/5] Copying Lisp files, .asd files, and package.lisp to local-projects..."
for p in km km-threads km-rest km-logging; do
    # Create or clear target directory
    if [ -d "$LOCAL_PROJECTS/$p" ]; then
        rm -rf "$LOCAL_PROJECTS/$p"
        if [ $? -ne 0 ]; then
            echo "Failed to clear existing directory $LOCAL_PROJECTS/$p"
            read -p "Press Enter to continue..."
            exit 1
        fi
    fi
    mkdir -p "$LOCAL_PROJECTS/$p"
    if [ $? -ne 0 ]; then
        echo "Failed to create $LOCAL_PROJECTS/$p"
        read -p "Press Enter to continue..."
        exit 1
    fi
    # Copy the .asd file if it exists
    if [ -f "$SRC_ROOT/$p.asd" ]; then
        cp "$SRC_ROOT/$p.asd" "$LOCAL_PROJECTS/$p/"
        if [ $? -ne 0 ]; then
            echo "Failed to copy $p.asd to $LOCAL_PROJECTS/$p"
            read -p "Press Enter to continue..."
            exit 1
        fi
        echo "Copied $p.asd to $LOCAL_PROJECTS/$p"
    else
        echo "No $p.asd found in $SRC_ROOT, skipping copy."
    fi
    # Copy the .lisp file if it exists
    if [ -f "$SRC_ROOT/$p.lisp" ]; then
        cp "$SRC_ROOT/$p.lisp" "$LOCAL_PROJECTS/$p/"
        if [ $? -ne 0 ]; then
            echo "Failed to copy $p.lisp to $LOCAL_PROJECTS/$p"
            read -p "Press Enter to continue..."
            exit 1
        fi
        echo "Copied $p.lisp to $LOCAL_PROJECTS/$p"
    else
        echo "No $p.lisp found in $SRC_ROOT, skipping copy."
    fi
    # Copy package.lisp if it exists in PACKAGES_ROOT/$p/
    PACKAGE_FILE="$PACKAGES_ROOT/$p/package.lisp"
    if [ -f "$PACKAGE_FILE" ]; then
        cp "$PACKAGE_FILE" "$LOCAL_PROJECTS/$p/"
        if [ $? -ne 0 ]; then
            echo "Failed to copy package.lisp from $PACKAGE_FILE to $LOCAL_PROJECTS/$p"
            read -p "Press Enter to continue..."
            exit 1
        fi
        echo "Copied package.lisp from $PACKAGE_FILE to $LOCAL_PROJECTS/$p"
    else
        echo "Warning: No package.lisp found at $PACKAGE_FILE. Build may fail for $p."
    fi
done

# Step 5: Register and verify packages with Quicklisp
echo
echo "[5/5] Registering packages with Quicklisp..."
"$SBCL_PATH" --load "$QUICKLISP_SETUP" --eval "(ql:register-local-projects)" --quit
if [ $? -ne 0 ]; then
    echo "Failed to register local projects with Quicklisp"
    read -p "Press Enter to continue..."
    exit 1
fi
for p in km km-threads km-rest; do
    "$SBCL_PATH" --load "$QUICKLISP_SETUP" --eval "(handler-case (ql:quickload :$p) (error (c) (format t \"Error loading $p: ~a~%\" c) (sb-ext:exit :code 1)))" --quit
    if [ $? -ne 0 ]; then
        echo "Failed to load package $p. Check error messages above."
        read -p "Press Enter to continue..."
        exit 1
    fi
    echo "Successfully loaded $p"
done

echo
echo "Setup and build completed successfully!"
read -p "Press Enter to continue..."