;; 
;;    $Id: Receive.km,v 1.17 2005/10/25 03:02:10 sdbaji Exp $ 
;; 

(Receive has
  	(superclasses	(Transfer))
	(required-slot  (recipient object))
	(primary-slot	(agent donor instrument))
	(secondary-slot ())
	(cmap-correspondence (
			       (:seq object "the thing received")
                               (:seq agent "causer")
                               (:seq donor "donor")
                               (:seq recipient "recipient")
                               (:seq instrument "instrument")
			     ))
#|      (sentence-type  (*punctual *conclusive))|#
)


(every Receive has
  (recipient ((a Entity)))
    
  ;; This axiom is temporarily ommitted because it
  ;; may be too restrictive.
  ;;
  ;; (donor     ((<> (the recipient of Self))))  

  ;; The pre and post-conditions of this concept
  ;; are directly inheritted from Transfer.
)

(every Receive has
  (text-active-verbseq-sg ("receives"))
  (text-active-verbseq-pl ("receive"))
  (text-passive-verbseq-sg ("is received"))
  (text-passive-verbseq-pl ("are received"))

  (text-subj ((if (has-value (the agent of Self))
               then (the agent of Self)
               else (the recipient of Self)
  )))

  (text-argslots ((:seq donor instrument)))        ; recipient will be subj

  (text-active-sentence (
     (:seq (if ((the text-subj of Self) /= (the recipient of Self))
            then (:seq
                    (the text-subj-phrase of Self)
                    (if ((the number of (the text-subj of Self)) = 1)
                     then ("causes")
                     else ("cause"))
                    (andify (the text-phrase of (the recipient of Self)))
                    ("to")
                    (the text-active-verbseq-pl of Self)
                 )
            else (:seq
                    (the text-subj-phrase of Self)
                    (the text-active-phrase of Self)
                 ))
           (the text-dobj-phrase of Self)
           (the text-arguments of Self)
  )))

)


;; nothing extra to say about contextual info

(Receive has 
  (test-case ('( 
		 (*Present has
			(instance-of (Tangible-Entity)))
		 (*Maple has
			(instance-of (Tangible-Entity)))

		 ;; *Maple received *Present
		 (*Receive has
			(instance-of (Receive))
			(recipient   (*Maple))
			(object      (*Present)))
		 (do-and-next *Receive)
		 (the text-gen of (thelast Receive))
		 ;; Test 1: The *Maple now has *Present
		 ((the possesses of *Maple) = *Present)

		 ;; Test 2: The *Present is owned by *Maple
		 ((the is-possessed-by of *Present) = *Maple)
	       )))
)


;; automatically added WN synsets
(Receive has (wn16-synset ((:set  
                                      (:triple "receive" 1 "v")
                                      (:triple "have" 16 "v")
))))

(Receive has (wn20-synset ((:set
                                      (:triple "receive" 1 "v")
                                      (:triple "have" 15 "v")
))))

(every Receive has (text-nominalization ("reception")))