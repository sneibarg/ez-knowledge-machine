<!--- $Id: Be-Ruined.spec.kml,v 1.1 2005/08/01 20:57:33 jchaw Exp $ --->

<kml>

<concept name=Be-Ruined><system-documentation name=Be-Ruined>

<superconcept name=Be-Broken>

<definition>

  An <slot>object</slot> becomes nonfunctional, and is beyond repair.  
  If the <slot>object</slot> can be repaired, then it is only broken.

  An object is put in this state by <conceptref name=Ruin>.

  An object cannot be taken out of this state.

</definition>

<requiredslotlist>

   <slotdescription name=object>
      the thing that becomes ruined
      <restriction> this must be a <conceptref name=Tangible-Entity> </restriction>
   </slotdescription>

</requiredslotlist>

<examplesentencelist>

   <examplesentence>
     <text>Sally smashed the Ming vase.</text>
     <slotdescription name=object>the Ming vase</slotdescription>
   </examplesentence>
   
   <examplesentence>
     <text>Jerome destroyed his bicycle in the crash.</text>
     <slotdescription name=object>his bicycle</slotdescription>
   </examplesentence>
   <comment>
      Depending on the severity of damaged sustained to the bicycle, 
      <conceptref name=Be-Broken> may be more appropriate.
   </comment>

   <examplesentence>
     <text>King Arthur rased the town.</text>
     <slotdescription name=object>the town</slotdescription>
   </examplesentence>

</examplesentencelist>

<neighborlist>

   <neighbor name=Be-Broken>
      Be-Broken is for things that can be repaired.
   </neighbor>

</neighborlist>


</kml>


