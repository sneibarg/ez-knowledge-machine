;; 
;;    $Id: Lose.km,v 1.16 2005/10/25 03:02:09 sdbaji Exp $ 
;; 

(Lose has
  	(superclasses	(Transfer))
	(required-slot  (object donor))
	(primary-slot	(agent recipient instrument))
	(secondary-slot ())
	(cmap-correspondence (
			       (:seq object "the thing lost")
                               (:seq agent "causer")
                               (:seq donor "donor")
                               (:seq recipient "recipient")
                               (:seq instrument "instrument")
			     ))
      #|(sentence-type  (*punctual *conclusive))|#
)

(every Lose has
  (donor ((a Tangible-Entity)))
  
  ;; This axiom is temporarily omitted because it
  ;; may be too restrictive.
  ;;
  ;; (recipient     ((<> (the donor of Self))))

  ;; The pre and post-conditions of this concept
  ;; are directly inheritted from Transfer.
)

(every Lose has
  (text-active-verbseq-sg ("loses"))
  (text-active-verbseq-pl ("lose"))
  (text-passive-verbseq-sg ("is lost"))
  (text-passive-verbseq-pl ("are lost"))

  (text-subj ((if (has-value (the agent of Self))
               then (the agent of Self)
               else (the donor of Self)
  )))

  (text-argslots ((:seq recipient instrument)))        ; donor will be subj

  (text-active-sentence (
     (:seq (if ((the text-subj of Self) /= (the donor of Self))
            then (:seq
                    (the text-subj-phrase of Self)
                    (if ((the number of (the text-subj of Self)) = 1)
                     then ("causes")
                     else ("cause"))
                    (andify (the text-phrase of (the donor of Self)))
                    ("to")
                    (the text-active-verbseq-pl of Self)
                 )
            else (:seq
                    (the text-subj-phrase of Self)
                    (the text-active-phrase of Self)
                 ))
           (the text-dobj-phrase of Self)
           (the text-arguments of Self)
  )))
)


;; nothing extra to say about contextual info

(Lose has 
  (test-case ('( 
                 (*Mark has (instance-of (Tangible-Entity)))
                 (*Book has (instance-of (Tangible-Entity)))
		 (*Mark has 
			(instance-of (Tangible-Entity))
			(possesses   (*Book))) 

		 ;; *Mark Lost the *Book
                 (*Lose has
                        (instance-of (Lose))
                        (donor  (*Mark))
                        (object (*Book)))
                 (do-and-next *Lose)
		 (the text-gen of (thelast Lose))
		 ;; Test 1: *Mark no longer has the *Book
                 ((the possesses of *Mark) = nil) 

		 ;; Test 2: The *Book is no longer owned by *Mark
		 ((the is-possessed-by of *Book) /= *Mark)
               )))
)


;; automatically added WN synsets
(Lose has (wn16-synset ((:set  
                                   (:triple "lose" 1 "v")
))))

(Lose has (wn20-synset ((:set
                                   (:triple "lose" 1 "v")
))))

(every Lose has (text-nominalization ("loss")))