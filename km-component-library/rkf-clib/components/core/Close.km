;; 
;;    $Id: Close.km,v 1.29 2005/10/25 03:02:08 sdbaji Exp $ 
;; 

(Close has
  (superclasses 	(Block))
  (required-slot        (object))
  (primary-slot         (agent instrument))
  (secondary-slot       ())
  (cmap-correspondence  (
                         (:seq object "portal through the barrier")
                         (:seq agent "closer")
                         (:seq instrument "portal covering")
			 ))
#|(sentence-type        (*punctual *conclusive))|#
)

(every Close has
  (object  ((a Spatial-Entity with
	       (plays ((a Portal))))))
  (instrument  ((a Tangible-Entity)))
  (resulting-state  ((a Be-Closed)))

  ;; The State that is defeated.
  (defeats   ((allof (the object-of of (the object of Self))
                     where
	 	     ((the classes of It) = Be-Open))))

  ;; The following are the pre- and post-preconditions.
  (pcs-list  ((:triple
		(the object of Self)
		object-of
		(mustnt-be-a Be-Closed) [Close-pcs-1])
	      (:triple
		(the object of Self)
		object-of
		(a Be-Open) [Close-pcs-2])
	      (:triple
		(the object of Self)
		object-of
		(mustnt-be-a Be-Blocked) [Close-pcs-3])
  ))

  (add-list  ((:triple
		(the resulting-state of Self)
		object
		(the object of Self) [Close-add-1])
	      (:triple
	        (the resulting-state of Self)
	        instrument
	        (the instrument of Self) [Close-add-2])
              (:triple
                (the instrument of Self)
                plays
                (a Portal-Covering with 
                   (in-event ((the resulting-state of Self)))) [Close-add-3])
  ))

  (del-list  ((forall (the defeats of Self)
		(:triple It object (the object of Self) [Close-del-1]))
              (:triple
                (the object of Self)
                plays
                (the Portal plays of (the object of Self)) [Close-del-2])
  ))

)

(comment [Close-pcs-1] (:seq (the object of Self) " cannot be closed already.")
	 "Something that is already closed cannot be closed again.")

(comment [Close-pcs-2] (:seq (the object of Self) " must be open.")
	 "Something must be open if it is to be closed.")

(comment [Close-pcs-3] (:seq (the object of Self) " cannot be blocked.")
	 "Something cannot be blocked if it is to be closed.")

(comment [Close-add-1] (:seq (the object of Self) " is closed.")
	 "A close causes something to be closed.")

(comment [Close-add-2] (:seq (the object of Self)
                              " is now blocked by " (the instrument of Self))
	 "An opening is closed by blocking it with something.")

(comment [Close-add-3] (:seq (the instrument of Self)
                              " is now blocking " (the object of Self))
	 "An opening is closed by blocking it with something.")

(comment [Close-del-1] (:seq (the object of Self) " is no longer open.")
	 "A close stops something from being open.")

(comment [Close-del-2] (:seq (the object of Self) " is no longer a portal.")
	 "A close stops something from being a portal through a barrier.")

(every Close has
  (text-active-verbseq-sg ("closes"))
  (text-active-verbseq-pl ("close"))
  (text-passive-verbseq-sg ("gets closed"))
  (text-passive-verbseq-pl ("get closed"))

  (text-argslots ((:seq base instrument path result)))
)

(every Close has 
  (preparatory-event ((:default
	(a Open with 
	   (object 	((the object of Self)))
	   (base   	((the base of Self)))
	   (agent  	((the agent of Self)))
	   (instrument  ((the instrument of Self))))
	(a Unblock with
	   (object	((the object of Self))))

))))


;; The Test cases for Close are incorporated with that 
;; of Open.
(Close has (test-case ()))



;; automatically added WN synsets
(Close has (wn16-synset ((:set  
                                    (:triple "close" 3 "v")
                                    (:triple "shut" 1 "v")
))))

(Close has (wn20-synset ((:set
                                    (:triple "close" 3 "v")
                                    (:triple "shut" 1 "v")
))))

(every Close has (text-nominalization ("closing")))