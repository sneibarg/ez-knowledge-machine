;; 
;;    $Id: Move-Into.km,v 1.42 2005/10/25 03:02:10 sdbaji Exp $ 
;; 

(Move-Into has
           (superclasses        (Move-Through))
           (required-slot       (object base destination))
           (primary-slot        (agent path))
           (secondary-slot      ())
           (cmap-correspondence (
                                 (:seq object "the thing moved")
                                 (:seq base "the enclosure")
                                 (:seq destination "moved to")
                                 (:seq agent "the mover")
                                 (:seq origin "moved from")
                                 (:seq path "moved along or through")
                                 (:seq toward "moved toward")
                                 (:seq away-from "moved away from")
                                 ))
        #|(sentence-type        (*punctual *conclusive))|#
)

(every Move-Into has
       (resulting-state ((a Be-Contained)))
       (object 	    ((a Tangible-Entity)))	
       (base        ((a Tangible-Entity with
                        (plays ((a Container)))
                        (encloses ((the destination of Self)))
                        (has-region ((a Spatial-Entity with 
					(plays ((a Portal)))))))))
       (destination ((a Spatial-Entity with
                        (is-inside ((the base of Self))))))
       (origin      ((a Spatial-Entity with
                        (is-outside ((the base of Self))))))
       (path        ((a Spatial-Entity with 
			(plays ((a Portal)))
			(is-region-of ((the base of Self)))
	)))

       ;; SOFT PCS:
       (soft-pcs-list ((forall (the object of Self)
			 (:triple It is-outside (the base of Self)))))

       ;;; specified in Move-Through already       
       (pcs-list  (
                   (forall (the object of Self)
                     (:triple It 
                              object-of
                              (mustnt-be-a Be-Shut-Out with 
                                (base ((the base of Self)))) [Move-Into-pcs-1]))
	           (if (has-value (the path of Self))
                       then
			(forall (the path of Self)
                       (:triple 
			   (the path of Self)
			   object-of
			   (mustnt-be-a Be-Closed))))	  
	))

       (add-list  (
                   (:triple (the Container plays of (the base of Self))
                            content
                            (the object of Self) [Move-Into-add-1])
		   (:triple (the resulting-state of Self) object (the object of Self) [Move-Into-add-2])
	))

	(interrupted-by ((must-be-a Move-Out-Of with 
				(object ((the object of Self)))
				(base ((the base of Self))))))

)

(comment [Move-Into-pcs-1] (:seq (the object of Self) " cannot be shut out of " (the base of Self))
	 "Something cannot move into something else if it has been shut out of it.")

(comment [Move-Into-add-1] (:seq (the base of Self) " now contains " (the object of Self))
	 "Something is contained by the thing it moves into.")

(comment [Move-Into-add-2] (:seq (the object of Self) " is in the state of Be-Contained.") 
	"After being moved into something is in the state of being contained")



(every Move-Into has
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("gets moved"))
  (text-passive-verbseq-pl ("get moved"))

  (text-argslots ((:seq base path)))
  (text-base ("into"))
  (text-path ("through"))

)


;; additional contextual info needs to be added
(every Move-Into has
   (preparatory-event ((:default
	(a Admit with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
	(a Open with
	   (object ((the base of Self))))
	(a Move-Out-Of with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
))))



(Move-Into has
           (test-case ('(
                         (*Troy has 
                          (instance-of (Tangible-Entity)))

                         (*TrojanHorse has 
                          (instance-of (Physical-Object))
                          (is-outside (*Troy)))

                         ; *TrojanHorse Move-Into's *Troy
                         (a Move-Into with
                          (base (*Troy))
                          (object (*TrojanHorse)))

                         (do-and-next (thelast Move-Into))
			 (the text-gen of (thelast Move-Into))
                         ((the is-inside of *TrojanHorse) includes *Troy)

                         ((the content of (the Container plays of *Troy)) includes *TrojanHorse)
			 ((the Container plays of *Troy) isa Container)
			 (has-value (the Be-Contained object-of of *TrojanHorse))
))))


;; automatically added WN synsets
(Move-Into has (wn16-synset ((:set  
                                        (:triple "move_into" 1 "v")
                                        (:triple "enter" 1 "v")
                                        (:triple "come_in" 1 "v")
                                        (:triple "get_into" 2 "v")
                                        (:triple "get_in" 1 "v")
                                        (:triple "go_into" 1 "v")
                                        (:triple "go_in" 1 "v")
))))

(Move-Into has (wn20-synset ((:set
                                        (:triple "move_into" 1 "v")
                                        (:triple "enter" 1 "v")
                                        (:triple "come_in" 1 "v")
                                        (:triple "get_into" 2 "v")
                                        (:triple "get_in" 1 "v")
                                        (:triple "go_into" 1 "v")
                                        (:triple "go_in" 1 "v")
))))

(every Move-Into has (text-nominalization ("moving")))