(unless (find-package :km) (make-package :km))
(in-package :km)
(setq *using-km-package* t)

; converts a list into a string
(defun convert-to-string (lst)
  (cond ((endp lst) "")
	((and (endp (cdr lst)) 
	      (atom (car lst))) 
	 (if (numberp (car lst)) 
	     (prin1-to-string (car lst))
	   (format nil "~a" (car lst))))
	((listp (car lst)) 
	 (concat "(" 
		 (if (numberp (caar lst)) 
		     (prin1-to-string (caar lst))
		   (format nil "~a" (caar lst)))
		 " " 
		 (convert-to-string (cdar lst)) ") "
		 (convert-to-string (cdr lst)) ))
	(t (concat (if (numberp (car lst)) 
		       (prin1-to-string (car lst)) 
		     (format nil "~a" (car lst)))
		   " " 
		   (convert-to-string (cdr lst))))))

; (pprint-eq2 '(= |v| (|sqrt| (+ (|expt| |v0| 2) (* (* 2 |g|) |y|)))))
(defun pprint-eq2 (eq)
  (convert-to-string (pretty-print-helper eq)) )

; (pprint-eq '(= v (sqrt (+ (expt v0 2) (* (* 2 g) y)))))
(defun pprint-eq (eq)
  (let (string-eq)
	(setq string-eq (prin1-to-string (pretty-print-helper eq)))
	(subseq string-eq 1 (1- (length string-eq)))) )

; (cadr eq) to skip the quote
; (pretty-print-eq ''(= |v| (|sqrt| (+ (|expt| |v0| 2) (* (* 2 |g|) |y|)))))
(defun pretty-print-eq (eq)
  (if (quotep eq)
      (convert-to-string (pretty-print-helper (cadr eq)))
      (pretty-print-helper eq)))

(defun pretty-print-helper (eq)
  (cond ((atom eq) (list eq))
		((or (equal (car eq) '=) (equal (car eq) '+))
		 (concat-eq eq) )
		((equal (car eq) '*)
		 (cond ((and (listp (cadr eq)) (listp (caddr eq)))
				(cond ((and (or (equal (caadr eq) '+) (equal (caadr eq) '-))
							(or (equal (caaddr eq) '+) (equal (caaddr eq) '-)))
					   (append (list (pretty-print-helper (cadr eq))) 
							   (pretty-print-helper (car eq))
							   (list (pretty-print-helper (caddr eq)))) )
					  ((or (equal (caadr eq) '+) (equal (caadr eq) '-))
					   (append (list (pretty-print-helper (cadr eq)))
							   (pretty-print-helper (car eq))
							   (pretty-print-helper (caddr eq))) )
					  ((or (equal (caaddr eq) '+) (equal (caaddr eq) '-))
					   (append (pretty-print-helper (cadr eq))
							   (pretty-print-helper (car eq))
							   (list (pretty-print-helper (caddr eq)))) )
					  (t (concat-eq eq))))
			   ((listp (cadr eq))
				(if (or (equal (caadr eq) '+) (equal (caadr eq) '-))
					(append (list (pretty-print-helper (cadr eq)))
							(pretty-print-helper (car eq))
							(pretty-print-helper (caddr eq)))
				  (concat-eq eq) ))
			   ((listp (caddr eq))
				 (append (pretty-print-helper (cadr eq))
						 (pretty-print-helper (car eq))
						 (list (pretty-print-helper (caddr eq)))) )
			   (t (concat-eq eq))))
		((equal (car eq) '/)
		 (cond ((and (listp (cadr eq)) (listp (caddr eq)))
				(if (or (equal (caadr eq) '+) (equal (caadr eq) '-))
					(append (list (pretty-print-helper (cadr eq))) 
							(pretty-print-helper (car eq))
							(list (pretty-print-helper (caddr eq))))
				  (append (pretty-print-helper (cadr eq))
						  (pretty-print-helper (car eq))
						  (list (pretty-print-helper (caddr eq)))) ))
			   ((listp (cadr eq))
				(if (or (equal (caadr eq) '+) (equal (caadr eq) '-))
					(append (list (pretty-print-helper (cadr eq)))
							(pretty-print-helper (car eq))
							(pretty-print-helper (caddr eq)))
				  (concat-eq eq) ))
			   ((listp (caddr eq))
				 (append (pretty-print-helper (cadr eq))
						 (pretty-print-helper (car eq))
						 (list (pretty-print-helper (caddr eq)))) )
			   (t (concat-eq eq))))
		((equal (car eq) '-)
		 (cond ((and (listp (cadr eq)) (listp (caddr eq)))
				(if (and (or (equal (caadr eq) '*) (equal (caadr eq) '/))
						 (or (equal (caaddr eq) '*) (equal (caaddr eq) '/)))
					(concat-eq eq)
				  (if (or (equal (caadr eq) '*) (equal (caadr eq) '/))
					(append (pretty-print-helper (cadr eq))
							(pretty-print-helper (car eq))
							(list (pretty-print-helper (caddr eq))))
					(if (or (equal (caaddr eq) '*) (equal (caaddr eq) '/))
						(append (list (pretty-print-helper (cadr eq)))
								(pretty-print-helper (car eq))
								(pretty-print-helper (caddr eq)))
					  (append (list (pretty-print-helper (cadr eq))) 
							  (pretty-print-helper (car eq))
							  (list (pretty-print-helper (caddr eq)))) ))))
			   ((listp (caddr eq))
				(if (or (equal (caaddr eq) '*) (equal (caaddr eq) '/))
				 (append (pretty-print-helper (cadr eq))
						 (pretty-print-helper (car eq))
						 (list (pretty-print-helper (caddr eq))))
				 (concat-eq eq)))
			   (t (concat-eq eq))) )
		 

		((or (equal (car eq) '|expt|) (equal (car eq) 'expt))
		 (append (pretty-print-helper (cadr eq)) 
				 '(^) (pretty-print-helper (caddr eq))))
		((or (equal (car eq) '|sqrt|) (equal (car eq) 'sqrt))
		 (if (atom (cadr eq))
			 (append (pretty-print-helper (cadr eq)) '(^ 1/2))
		   (append (list (pretty-print-helper (cadr eq))) '(^ 1/2))))
	
		(t (list (concat-eq eq)))))

(defun concat-eq (eq)
  (append (pretty-print-helper (cadr eq))
		  (pretty-print-helper (car eq))
		  (pretty-print-helper (caddr eq))))

(defun pretty-print-eq-html (eq)
  (if (quotep eq)
      (convert-to-string (pretty-print-helper-html (cadr eq)))
      (convert-to-string (pretty-print-helper-html eq))))

(defun concat-eq-html (eq)
  (append (pretty-print-helper-html (cadr eq))
		  (pretty-print-helper-html (car eq))
		  (pretty-print-helper-html (caddr eq))))

(defun pretty-print-helper-html (eq)
  (cond ((atom eq) (cond ((equal eq '*) (list (format nil "&times;")))
                         ((equal eq '/) (list (format nil "&divide;")))
                         (t (list (htmlify-var-subscript eq)))))
	((or (equal (car eq) '=) (equal (car eq) '+))
	 (concat-eq-html eq) )
	((equal (car eq) '*)
	 (cond ((and (listp (cadr eq)) (listp (caddr eq)))
		(cond ((and (or (equal (caadr eq) '+) (equal (caadr eq) '-))
			    (or (equal (caaddr eq) '+) (equal (caaddr eq) '-)))
		       (append (list (pretty-print-helper-html (cadr eq))) 
			       (pretty-print-helper-html (car eq))
			       (list (pretty-print-helper-html (caddr eq)))) )
		      ((or (equal (caadr eq) '+) (equal (caadr eq) '-))
		       (append (list (pretty-print-helper-html (cadr eq)))
			       (pretty-print-helper-html (car eq))
			       (pretty-print-helper-html (caddr eq))) )
		      ((or (equal (caaddr eq) '+) (equal (caaddr eq) '-))
		       (append (pretty-print-helper-html (cadr eq))
			       (pretty-print-helper-html (car eq))
			       (list (pretty-print-helper-html (caddr eq)))) )
		      (t (concat-eq-html eq))))
	       ((listp (cadr eq))
		(if (or (equal (caadr eq) '+) (equal (caadr eq) '-))
		    (append (list (pretty-print-helper-html (cadr eq)))
			    (pretty-print-helper-html (car eq))
			    (pretty-print-helper-html (caddr eq)))
		  (concat-eq-html eq) ))
	       ((listp (caddr eq))
		(append (pretty-print-helper-html (cadr eq))
			(pretty-print-helper-html (car eq))
			(list (pretty-print-helper-html (caddr eq)))) )
	       (t (concat-eq-html eq))))
	((equal (car eq) '/)
	 (cond ((and (listp (cadr eq)) (listp (caddr eq)))
		(if (or (equal (caadr eq) '+) (equal (caadr eq) '-))
		    (append (list (pretty-print-helper-html (cadr eq))) 
			    (pretty-print-helper-html (car eq))
			    (list (pretty-print-helper-html (caddr eq))))
		  (if (and (or (equal (caadr eq) '|log|) (equal (caadr eq) 'log))
				   (or (equal (caaddr eq) '|log|) (equal (caaddr eq) 'log)))
			  (if (atom (cadadr eq))
				  (if (atom (car (cdaddr eq)))
					  (list (format nil "log<sub>~A</sub>(~A)" 
						(convert-to-string (pretty-print-helper-html (car (cdaddr eq))))
						(convert-to-string (pretty-print-helper-html (cadadr eq)))))
					(list (format nil "log<sub>~A</sub>(~A)" 
						  (pretty-print-helper-html (car (cdaddr eq)))
						  (convert-to-string (pretty-print-helper-html (cadadr eq))))))
				(if (atom (car (cdaddr eq)))
					(list (format nil "log<sub>~A</sub>~A" 
						  (convert-to-string (pretty-print-helper-html (car (cdaddr eq))))
						  (pretty-print-helper-html (cadadr eq))))
				  (list (format nil "log<sub>~A</sub>~A"
						(pretty-print-helper-html (car (cdaddr eq)))
						(pretty-print-helper-html (cadadr eq))))))
			(append (pretty-print-helper-html (cadr eq))
					(pretty-print-helper-html (car eq))
					(list (pretty-print-helper-html (caddr eq)))) )))
	       ((listp (cadr eq))
		(if (or (equal (caadr eq) '+) (equal (caadr eq) '-))
		    (append (list (pretty-print-helper-html (cadr eq)))
			    (pretty-print-helper-html (car eq))
			    (pretty-print-helper-html (caddr eq)))
		  (concat-eq-html eq) ))
	       ((listp (caddr eq))
		(append (pretty-print-helper-html (cadr eq))
			(pretty-print-helper-html (car eq))
			(list (pretty-print-helper-html (caddr eq)))) )
	       (t (concat-eq-html eq))))
	((equal (car eq) '-)
	 (cond 
	  ((equal (length (cdr eq)) 1)
	   (append (pretty-print-helper-html (car eq))
		   (pretty-print-helper-html (cadr eq))))
	  ((and (listp (cadr eq)) (listp (caddr eq)))
		(if (and (or (equal (caadr eq) '*) (equal (caadr eq) '/))
			 (or (equal (caaddr eq) '*) (equal (caaddr eq) '/)))
		    (concat-eq-html eq)
		  (if (or (equal (caadr eq) '*) (equal (caadr eq) '/))
		      (append (pretty-print-helper-html (cadr eq))
			      (pretty-print-helper-html (car eq))
			      (list (pretty-print-helper-html (caddr eq))))
		    (if (or (equal (caaddr eq) '*) (equal (caaddr eq) '/))
			(append (list (pretty-print-helper-html (cadr eq)))
				(pretty-print-helper-html (car eq))
				(pretty-print-helper-html (caddr eq)))
		      (append (list (pretty-print-helper-html (cadr eq))) 
			      (pretty-print-helper-html (car eq))
			      (list (pretty-print-helper-html (caddr eq)))) ))))
	       ((listp (caddr eq))
		(if (or (equal (caaddr eq) '*) (equal (caaddr eq) '/))
		    (append (pretty-print-helper-html (cadr eq))
			    (pretty-print-helper-html (car eq))
			    (list (pretty-print-helper-html (caddr eq))))
		  (concat-eq-html eq)))
	       (t (concat-eq-html eq))))
		 
	((or (equal (car eq) '|expt|) (equal (car eq) 'expt))
	 (list (format nil "~A<sup>~A</sup>"
		       (convert-to-string (pretty-print-helper-html (cadr eq)))
		       (convert-to-string (pretty-print-helper-html (caddr eq))))))

	((or (equal (car eq) '|sqrt|) (equal (car eq) 'sqrt))
	 (if (atom (cadr eq))
	     (list (format nil "&radic;~A"
			   (convert-to-string (pretty-print-helper-html (cadr eq)))))
	   (list (format nil "&radic;~A" 
			 (pretty-print-helper-html (cadr eq))))))
	((or (equal (car eq) '|log|) (equal (car eq) 'log))
	 (if (atom (cadr eq))
	     (list (format nil "ln(~A)"
			   (convert-to-string (pretty-print-helper-html (cadr eq)))))
	   (list (format nil "ln~A" 
			 (pretty-print-helper-html (cadr eq))))))
	((or (equal (car eq) '|sin|) (equal (car eq) 'sin))
	 (if (atom (cadr eq))
	     (list (format nil "sin(~A)"
			   (convert-to-string (pretty-print-helper-html (cadr eq)))))
	   (list (format nil "sin~A" 
			 (pretty-print-helper-html (cadr eq))))))
	((or (equal (car eq) '|cos|) (equal (car eq) 'cos))
	 (if (atom (cadr eq))
	     (list (format nil "cos(~A)"
			   (convert-to-string (pretty-print-helper-html (cadr eq)))))
	   (list (format nil "cos~A" 
			 (pretty-print-helper-html (cadr eq))))))		
	((or (equal (car eq) '|tan|) (equal (car eq) 'tan))
	 (if (atom (cadr eq))
	     (list (format nil "tan(~A)"
			   (convert-to-string (pretty-print-helper-html (cadr eq)))))
	   (list (format nil "tan~A" 
			 (pretty-print-helper-html (cadr eq))))))
	(t (list (concat-eq-html eq)))))
